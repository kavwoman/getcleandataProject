install.packages(c("slidiy","ggplot2","devtools"))
install.packages("KernSmooth")
clear
load("~/Documents/datascience/repos/test-repo/HelloWorld.md")
clear
cl
clear
x <- rnorm(50)
y <- rnorm(x)
plot(x,y)
ls()
rm(x,y)
ls()
x <- 1:20
x
w <- 1+sqrt(x)/2
dummy <- data.frame(x=x,y=x+rnorm(x)+w)
dummy
fm <- lm(y ~ x, data=dummy)
summary(fm)
fml <- lm(y~x,data=dummy,weight=1/w^2)
summary(fml)
attach(dummy)
attach(dummy)
lrf <- lowess(x,y)
plot(x,y)
lines(x,lrf$y)
summary(lrf)
lrf <- lowess(x,y)
summary(lrf)
abline(0,1,lty=3)
abline(coef(fm))
abline(coef(fml),col="red")
detach()
plot(fitted(fm),resid(fm),xlab="Fitted values",ylab="Residuals",main="Residuals vs Fitted")
qqnorm(resid(fm),main="Residuals Rankit Plot")
rm(fm, fml, lrf, x, dummy)
filepath <- system.file("data", "morley.tab", package="datasets")
filepath
file.show(filepath)
mm <- read.table(filepath)
rm(w)
mm
mm$Expt <- factor(mm$Expt)
mm$Run <- factor(mm$Run)
attach(mm)
plot(Expt,Speed,main="Speed of Light Data",xlab="Experiment No.")
fm <- aov(Speed ~ Run + Expt, data=mm)
summary(fm)
fm0 <- update(fm, . ~ . - Run)
anova(fm0,fm)
detach()
rm(fm, fm0)
x<-seq(-pi, pi, len=50)
y<-x
f <- outer(x,y, function(x,y) cos(y)/(1+x^2))
oldpar <- par(no.readonly=TRUE)
par(pty="s")
contour(x,y,f)
contour(x,y,f,nlevels=15,add=TRUE)
fa <-(f-t(f)).2
fa <-(f-t(f))/2
contour(x,y,fa,nlevels=15)
par(oldpar)
image(x,y,f)
image(x,y,fa)
objects(); rm(x,y,f,fa)
solve
?solve
??solve
?help.search
x <- c(1,2,3,4,5)
x
x <- r(6,4,3,2,1)
?c
x = r(2,4,5,6,7)
x = c(2,4,5,6,7)
x
?<-
??<-
y<-c(x,0,x)
y
2*x + y + 1
?order
?min
setwd("Documents/datascience/getCleanData/project/getcleandataProject/")
source("run_analysis.R")
data[1:5,1:5]
descr_activity <- as.vector(activity_labels$V2[c(train_activity$V1,
test_activity$V1)])
descr_activity <- as.vector(activity_labels[c(train_activity$V1,
test_activity$V1)])
descr_activity
data <- cbind(descr_activity, data)
names(data)[1] <- "activity"
data[1:5,1:5]
# Find the variables related to mean and std by looking for
# the strings "mean" and "std" in each feature name
is_mean_feature <- sapply(feature_list, grepl, pattern = "mean",
USE.NAMES = FALSE, ignore.case = TRUE)
is_std_feature <- sapply(feature_list, grepl, pattern = "std",
USE.NAMES = FALSE, ignore.case = TRUE)
# Keep only the mean and std variables
data_means_stds <- data[,is_mean_feature | is_std_feature]
# Write the data to file "data_means_stds.txt"
write.table(data_means_stds, file = "data_means_stds.txt", row.name = FALSE)
data_ms_split = split(data_means_stds, list(subject_data, descr_activity))
# Calculate the average values for each feature, for each pair
averages = lapply(data_ms_split, function(x) colMeans(x[,c(-1, -2)]))
# Reshape the data into a data frame with 180 rows (6 activities x 30 subjects)
# The rows are ordered first by activity (alphabetical order), then by subject
data_averages = as.data.frame(matrix(unlist(averages), 180, 86, byrow = TRUE))
# Create columns of activity and subject labels and bind them to the data
averages_activity_labels = rep(sort(activity_labels[,2]), each = 30)
averages_subject_labels = rep(1:30, times = 6)
data_averages = cbind(averages_activity_labels, averages_subject_labels, data_averages)
# Add the feature labels back onto the data frame
names(data_averages) <- names(data_means_stds)
write.table(data_averages, file = "data_averages.txt", row.name = FALSE)
data_averages = as.data.frame(matrix(unlist(averages), 180, 86, byrow = TRUE))
averages_activity_labels = rep(sort(activity_labels[,2]), each = 30)
averages_activity_labels = rep(sort(activity_labels), each = 30)
averages_activity_labels
averages_subject_labels = rep(1:30, times = 6)
data_averages = cbind(averages_activity_labels, averages_subject_labels, data_averages)
names(data_averages) <- names(data_means_stds)
write.table(data_averages, file = "data_averages.txt", row.name = FALSE)
